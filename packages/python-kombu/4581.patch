From 910807270cf0bb695a98effbae7758a9f943a149 Mon Sep 17 00:00:00 2001
From: Rohan McGovern <rohan@mcgovern.id.au>
Date: Sat, 30 Mar 2019 12:49:08 +1000
Subject: [PATCH 1/3] qpid: correctly declare support for async event loop
 (#1029)

qpid transport supports an async interface, but this wasn't declared
properly. It was missing an appropriate 'implements' class property.

This seems to have been missed because:

- kombu 4.x was branched from 3.0.21
- qpid transport was originally added after that in 3.0.24
- Transport.implements was added in commit 6a1abb7e9 on the 4.x branch
  only, before the qpid transport was in that branch
- qpid transport code was then copied between 3.x and 4.x branches but
  addition of Transport.implements was missed.
---
 kombu/transport/qpid.py       | 6 ++++--
 t/unit/transport/test_qpid.py | 7 ++++---
 2 files changed, 8 insertions(+), 5 deletions(-)

diff --git a/kombu/transport/qpid.py b/kombu/transport/qpid.py
index 22046241..79978fc4 100644
--- a/kombu/transport/qpid.py
+++ b/kombu/transport/qpid.py
@@ -119,7 +119,7 @@ except ImportError:  # pragma: no cover
 from kombu.five import Empty, items, monotonic
 from kombu.log import get_logger
 from kombu.transport.virtual import Base64, Message
-from kombu.transport import base
+from kombu.transport import base, virtual
 
 
 logger = get_logger(__name__)
@@ -1399,7 +1399,9 @@ class Transport(base.Transport):
     polling_interval = None
 
     # This Transport does support the Celery asynchronous event model.
-    supports_ev = True
+    implements = virtual.Transport.implements.extend(
+        asynchronous=True,
+    )
 
     # The driver type and name for identification purposes.
     driver_type = 'qpid'
diff --git a/t/unit/transport/test_qpid.py b/t/unit/transport/test_qpid.py
index bf796212..68756603 100644
--- a/t/unit/transport/test_qpid.py
+++ b/t/unit/transport/test_qpid.py
@@ -1684,9 +1684,6 @@ class test_Transport_class_attributes(object):
     def test_verify_polling_disabled(self):
         assert Transport.polling_interval is None
 
-    def test_transport_verify_supports_asynchronous_events(self):
-        assert Transport.supports_ev
-
     def test_verify_driver_type_and_name(self):
         assert Transport.driver_type == 'qpid'
         assert Transport.driver_name == 'qpid'
@@ -1840,6 +1837,10 @@ class test_Transport(ExtraAssertionsMixin):
         """Creates a mock_client to be used in testing."""
         self.mock_client = Mock()
 
+    def test_supports_ev(self):
+        """Test that the transport claims to support async event loop"""
+        assert Transport(self.mock_client).supports_ev
+
     def test_close_connection(self):
         """Test that close_connection calls close on the connection."""
         my_transport = Transport(self.mock_client)
-- 
2.20.1


From a4d6f857fbc0f8d348b25ee51b2cb02de4cad099 Mon Sep 17 00:00:00 2001
From: Rohan McGovern <rmcgover@redhat.com>
Date: Tue, 2 Apr 2019 15:11:30 +1000
Subject: [PATCH 2/3] qpid: ensure supported exchange types are declared

This is a follow-up to ddba8aeaf0f68. Prior to that commit,
"implements" was missing entirely for qpid. The earlier commit
added it, but only declared that the transport was async-capable.

Turns out it's important also to declare the supported exchange
types. In particular, if the transport doesn't declare support
for the 'fanout' exchange type, pidbox wouldn't be used[1] and so
it would still not be possible to revoke a task with terminate=True
when using the qpid transport.

[1] celery/celery commit 2f58c35340f648
---
 kombu/transport/qpid.py       | 1 +
 t/unit/transport/test_qpid.py | 6 ++++++
 2 files changed, 7 insertions(+)

diff --git a/kombu/transport/qpid.py b/kombu/transport/qpid.py
index 79978fc4..97e767c1 100644
--- a/kombu/transport/qpid.py
+++ b/kombu/transport/qpid.py
@@ -1401,6 +1401,7 @@ class Transport(base.Transport):
     # This Transport does support the Celery asynchronous event model.
     implements = virtual.Transport.implements.extend(
         asynchronous=True,
+        exchange_type=frozenset(['direct', 'topic', 'fanout']),
     )
 
     # The driver type and name for identification purposes.
diff --git a/t/unit/transport/test_qpid.py b/t/unit/transport/test_qpid.py
index 68756603..044493f1 100644
--- a/t/unit/transport/test_qpid.py
+++ b/t/unit/transport/test_qpid.py
@@ -1688,6 +1688,12 @@ class test_Transport_class_attributes(object):
         assert Transport.driver_type == 'qpid'
         assert Transport.driver_name == 'qpid'
 
+    def test_verify_implements_exchange_types(self):
+        assert 'fanout' in Transport.implements.exchange_type
+        assert 'direct' in Transport.implements.exchange_type
+        assert 'topic' in Transport.implements.exchange_type
+        assert 'frobnitz' not in Transport.implements.exchange_type
+
     def test_transport_verify_recoverable_connection_errors(self):
         connection_errors = Transport.recoverable_connection_errors
         assert ConnectionError in connection_errors
-- 
2.20.1


From 587696bd6de075fba5c08a362edb7f5f7421ff89 Mon Sep 17 00:00:00 2001
From: Dennis Kliban <dkliban@redhat.com>
Date: Tue, 2 Apr 2019 07:38:23 -0400
Subject: [PATCH 3/3] Small update to make patch work with 4.0.2

---
 kombu/transport/qpid.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/kombu/transport/qpid.py b/kombu/transport/qpid.py
index 97e767c1..8cb5ed37 100644
--- a/kombu/transport/qpid.py
+++ b/kombu/transport/qpid.py
@@ -1400,7 +1400,7 @@ class Transport(base.Transport):
 
     # This Transport does support the Celery asynchronous event model.
     implements = virtual.Transport.implements.extend(
-        asynchronous=True,
+        async=True,
         exchange_type=frozenset(['direct', 'topic', 'fanout']),
     )
 
-- 
2.20.1

